plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'	// 미리 만들어진 Hal Explorer를 통해 간단한 API 테스트를 할 수 있도록 함 (Swagger랑 비슷함)
	implementation 'mysql:mysql-connector-java'
	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'junit:junit:4.13.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
//	runtimeOnly 'com.mysql:mysql-connector-j'
//	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'	// 사용자가 직접 만든 config 속성을 yaml에서 사용 가능해짐








	// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	// ${dependencyManagement.importedProperties['querydsl.version']}은 Plugin을 통해 설정된 Spring dependencyManagement 안에 querydsl.version 버전에 맞게 자동으로 버전넘버가 설정됨
	// 기존에는 버전넘버를 생략가능하지만 마지막에 :jakarta처럼 설정이 붙기 때문에 자동으로 버전 설정이 안됨 따라서 수동으로 해야함
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"			// 에러에 대한 대응을 하기 위해 미리 넣어둠
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"		// 에러에 대한 대응을 하기 위해 미리 넣어둠
}

// 단위 테스트 오류로 인하여 주석 처리
tasks.named('test') {
	useJUnitPlatform()
}


// Querydsl 설정부
// QClass가 저장되는 generated폴더는 원래는 build 폴더 안에 숨겨진 파일인데 해당 내용을 확인하기 위해 src/main/generated 위치로 꺼내는 작업
def generated = 'src/main/generated'

// Querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile){
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set에 querydsl QClass 위치 추가
sourceSets{
	main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean{
	delete file(generated)
}